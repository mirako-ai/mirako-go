// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AsyncGenerateImageApiRequestBodyAspectRatio.
const (
	N11  AsyncGenerateImageApiRequestBodyAspectRatio = "1:1"
	N169 AsyncGenerateImageApiRequestBodyAspectRatio = "16:9"
	N23  AsyncGenerateImageApiRequestBodyAspectRatio = "2:3"
	N32  AsyncGenerateImageApiRequestBodyAspectRatio = "3:2"
	N34  AsyncGenerateImageApiRequestBodyAspectRatio = "3:4"
	N43  AsyncGenerateImageApiRequestBodyAspectRatio = "4:3"
	N916 AsyncGenerateImageApiRequestBodyAspectRatio = "9:16"
)

// Defines values for AsyncTaskStatusStatus.
const (
	AsyncTaskStatusStatusCANCELED   AsyncTaskStatusStatus = "CANCELED"
	AsyncTaskStatusStatusCOMPLETED  AsyncTaskStatusStatus = "COMPLETED"
	AsyncTaskStatusStatusFAILED     AsyncTaskStatusStatus = "FAILED"
	AsyncTaskStatusStatusINPROGRESS AsyncTaskStatusStatus = "IN_PROGRESS"
	AsyncTaskStatusStatusINQUEUE    AsyncTaskStatusStatus = "IN_QUEUE"
	AsyncTaskStatusStatusTIMEDOUT   AsyncTaskStatusStatus = "TIMED_OUT"
)

// Defines values for AvatarResponseStatus.
const (
	BUILDING AvatarResponseStatus = "BUILDING"
	ERROR    AvatarResponseStatus = "ERROR"
	PENDING  AvatarResponseStatus = "PENDING"
	READY    AvatarResponseStatus = "READY"
)

// Defines values for FinetuningTaskOutputStatus.
const (
	FinetuningTaskOutputStatusCANCELED   FinetuningTaskOutputStatus = "CANCELED"
	FinetuningTaskOutputStatusCOMPLETED  FinetuningTaskOutputStatus = "COMPLETED"
	FinetuningTaskOutputStatusFAILED     FinetuningTaskOutputStatus = "FAILED"
	FinetuningTaskOutputStatusINPROGRESS FinetuningTaskOutputStatus = "IN_PROGRESS"
	FinetuningTaskOutputStatusINQUEUE    FinetuningTaskOutputStatus = "IN_QUEUE"
	FinetuningTaskOutputStatusTIMEDOUT   FinetuningTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateAvatarMotionTaskOutputStatus.
const (
	GenerateAvatarMotionTaskOutputStatusCANCELED   GenerateAvatarMotionTaskOutputStatus = "CANCELED"
	GenerateAvatarMotionTaskOutputStatusCOMPLETED  GenerateAvatarMotionTaskOutputStatus = "COMPLETED"
	GenerateAvatarMotionTaskOutputStatusFAILED     GenerateAvatarMotionTaskOutputStatus = "FAILED"
	GenerateAvatarMotionTaskOutputStatusINPROGRESS GenerateAvatarMotionTaskOutputStatus = "IN_PROGRESS"
	GenerateAvatarMotionTaskOutputStatusINQUEUE    GenerateAvatarMotionTaskOutputStatus = "IN_QUEUE"
	GenerateAvatarMotionTaskOutputStatusTIMEDOUT   GenerateAvatarMotionTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateAvatarTaskOutputStatus.
const (
	GenerateAvatarTaskOutputStatusCANCELED   GenerateAvatarTaskOutputStatus = "CANCELED"
	GenerateAvatarTaskOutputStatusCOMPLETED  GenerateAvatarTaskOutputStatus = "COMPLETED"
	GenerateAvatarTaskOutputStatusFAILED     GenerateAvatarTaskOutputStatus = "FAILED"
	GenerateAvatarTaskOutputStatusINPROGRESS GenerateAvatarTaskOutputStatus = "IN_PROGRESS"
	GenerateAvatarTaskOutputStatusINQUEUE    GenerateAvatarTaskOutputStatus = "IN_QUEUE"
	GenerateAvatarTaskOutputStatusTIMEDOUT   GenerateAvatarTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateTalkingAvatarTaskOutputStatus.
const (
	GenerateTalkingAvatarTaskOutputStatusCANCELED   GenerateTalkingAvatarTaskOutputStatus = "CANCELED"
	GenerateTalkingAvatarTaskOutputStatusCOMPLETED  GenerateTalkingAvatarTaskOutputStatus = "COMPLETED"
	GenerateTalkingAvatarTaskOutputStatusFAILED     GenerateTalkingAvatarTaskOutputStatus = "FAILED"
	GenerateTalkingAvatarTaskOutputStatusINPROGRESS GenerateTalkingAvatarTaskOutputStatus = "IN_PROGRESS"
	GenerateTalkingAvatarTaskOutputStatusINQUEUE    GenerateTalkingAvatarTaskOutputStatus = "IN_QUEUE"
	GenerateTalkingAvatarTaskOutputStatusTIMEDOUT   GenerateTalkingAvatarTaskOutputStatus = "TIMED_OUT"
)

// Defines values for GenerateTaskOutputStatus.
const (
	GenerateTaskOutputStatusCANCELED   GenerateTaskOutputStatus = "CANCELED"
	GenerateTaskOutputStatusCOMPLETED  GenerateTaskOutputStatus = "COMPLETED"
	GenerateTaskOutputStatusFAILED     GenerateTaskOutputStatus = "FAILED"
	GenerateTaskOutputStatusINPROGRESS GenerateTaskOutputStatus = "IN_PROGRESS"
	GenerateTaskOutputStatusINQUEUE    GenerateTaskOutputStatus = "IN_QUEUE"
	GenerateTaskOutputStatusTIMEDOUT   GenerateTaskOutputStatus = "TIMED_OUT"
)

// Defines values for StartSessionApiRequestBodyModel.
const (
	Metis25 StartSessionApiRequestBodyModel = "metis-2.5"
)

// Defines values for TTSApiRequestBodyChineseLanguage.
const (
	Mandarin TTSApiRequestBodyChineseLanguage = "mandarin"
	Yue      TTSApiRequestBodyChineseLanguage = "yue"
)

// ApiTokenRecord defines model for ApiTokenRecord.
type ApiTokenRecord struct {
	// AuthTokenType Type of the authentication token used for this API user. Possible values are 'api_token', 'jwt_token'
	AuthTokenType string `json:"auth_token_type"`

	// CreatedAt Creation timestamp of the API token
	CreatedAt time.Time `json:"created_at"`

	// Events List of events associated with the API user, such as transaction events
	Events *map[string]interface{} `json:"events,omitempty"`

	// Hint Hint for the API token, used for displaying in the UI
	Hint string `json:"hint"`

	// IsDelinquent Indicates if the API user is delinquent, e.g., negative credits, unpaid bills
	IsDelinquent bool `json:"is_delinquent"`

	// Label Label for the API token, used for describing the purpose of the token
	Label string `json:"label"`

	// TokenId Unique identifier for the API token. Empty if user authenticated by jwt session.
	TokenId string `json:"token_id"`

	// Type Type of the API user. Default to 'user'
	Type string `json:"type"`

	// UserId User ID of the API token owner
	UserId string `json:"user_id"`
}

// ApiUserMetadata defines model for ApiUserMetadata.
type ApiUserMetadata struct {
	// IsDelinquent Indicates if the API user is delinquent, e.g., negative credits, unpaid bills
	IsDelinquent bool `json:"is_delinquent"`

	// UserId User ID of the API user
	UserId string `json:"user_id"`
}

// AsyncBuildApiRequestBody defines model for AsyncBuildApiRequestBody.
type AsyncBuildApiRequestBody struct {
	// Image The base64 encoded image to build the avatar from
	Image string `json:"image"`

	// Name The name of the avatar
	Name string `json:"name"`
}

// AsyncBuildApiResponseBody defines model for AsyncBuildApiResponseBody.
type AsyncBuildApiResponseBody struct {
	Data *AsyncBuildOutput `json:"data,omitempty"`
}

// AsyncBuildOutput defines model for AsyncBuildOutput.
type AsyncBuildOutput struct {
	// AvatarId The ID of the created avatar
	AvatarId string `json:"avatar_id"`
}

// AsyncFinetuningApiResponseBody defines model for AsyncFinetuningApiResponseBody.
type AsyncFinetuningApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncFinetunningWebhookRequestBody defines model for AsyncFinetunningWebhookRequestBody.
type AsyncFinetunningWebhookRequestBody struct {
	// DelayTime The time taken to process the request
	DelayTime int64 `json:"delayTime"`

	// Error The error message if any
	Error *string `json:"error,omitempty"`

	// ExecutionTime The time taken to process the request
	ExecutionTime int64 `json:"executionTime"`

	// Id The id of the request
	Id     string                    `json:"id"`
	Output *FinetuningOutputInternal `json:"output,omitempty"`

	// Status The status of the request. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status               string                 `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AsyncGenerateAvatarApiRequestBody defines model for AsyncGenerateAvatarApiRequestBody.
type AsyncGenerateAvatarApiRequestBody struct {
	// Prompt The prompt for the avatar generation.
	Prompt string `json:"prompt"`

	// Seed Random seed for the generation, if not provided a random seed will be used
	Seed    *int64   `json:"seed,omitempty"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateAvatarApiResponseBody defines model for AsyncGenerateAvatarApiResponseBody.
type AsyncGenerateAvatarApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncGenerateAvatarMotionApiRequestBody defines model for AsyncGenerateAvatarMotionApiRequestBody.
type AsyncGenerateAvatarMotionApiRequestBody struct {
	// Audio The base64 encoded audio file to use as the avatar's speech.
	Audio string `json:"audio"`

	// Image The base64 encoded image to use as the starting frame, which should clearly showing the avatar's face.
	Image string `json:"image"`

	// NegativePrompt The negative prompt to guide the avatar motion generation.
	NegativePrompt string `json:"negative_prompt"`

	// PositivePrompt The positive prompt to guide the avatar motion generation.
	PositivePrompt string   `json:"positive_prompt"`
	Webhook        *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateAvatarMotionApiResponseBody defines model for AsyncGenerateAvatarMotionApiResponseBody.
type AsyncGenerateAvatarMotionApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncGenerateAvatarWebhookRequestBody defines model for AsyncGenerateAvatarWebhookRequestBody.
type AsyncGenerateAvatarWebhookRequestBody struct {
	// DelayTime The time taken to process the request
	DelayTime int64 `json:"delayTime"`

	// Error The error message if any
	Error *string `json:"error,omitempty"`

	// ExecutionTime The time taken to process the request
	ExecutionTime int64 `json:"executionTime"`

	// Id The id of the request
	Id     string                `json:"id"`
	Output *GenerateAvatarOutput `json:"output,omitempty"`

	// Status The status of the request. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status               string                 `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AsyncGenerateImageApiRequestBody defines model for AsyncGenerateImageApiRequestBody.
type AsyncGenerateImageApiRequestBody struct {
	// AspectRatio The aspect ratio for the generation. Default to '16:9'
	AspectRatio AsyncGenerateImageApiRequestBodyAspectRatio `json:"aspect_ratio"`

	// Prompt The prompt for the image generation. Include in the prompt the Avatar Id (uuid) to generate image of the avatar.
	Prompt string `json:"prompt"`

	// Seed Random seed for the generation, if not provided a random seed will be used
	Seed    *int64   `json:"seed,omitempty"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateImageApiRequestBodyAspectRatio The aspect ratio for the generation. Default to '16:9'
type AsyncGenerateImageApiRequestBodyAspectRatio string

// AsyncGenerateImageApiResponseBody defines model for AsyncGenerateImageApiResponseBody.
type AsyncGenerateImageApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncGenerateTalkingAvatarApiRequestBody defines model for AsyncGenerateTalkingAvatarApiRequestBody.
type AsyncGenerateTalkingAvatarApiRequestBody struct {
	// Audio The base64 encoded audio file to use as the avatar's speech.
	Audio string `json:"audio"`

	// Image The base64 encoded image to use as the avatar's face.
	Image   string   `json:"image"`
	Webhook *Webhook `json:"webhook,omitempty"`
}

// AsyncGenerateTalkingAvatarApiResponseBody defines model for AsyncGenerateTalkingAvatarApiResponseBody.
type AsyncGenerateTalkingAvatarApiResponseBody struct {
	Data *AsyncTaskStatus `json:"data,omitempty"`
}

// AsyncTaskStatus defines model for AsyncTaskStatus.
type AsyncTaskStatus struct {
	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status AsyncTaskStatusStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// AsyncTaskStatusStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type AsyncTaskStatusStatus string

// AvatarResponse defines model for AvatarResponse.
type AvatarResponse struct {
	// CreatedAt Creation timestamp of the avatar
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the avatar
	Id string `json:"id"`

	// Name Name of the avatar
	Name string `json:"name"`

	// Status Status of the avatar, either 'PENDING', 'BUILDING', 'READY' or 'ERROR'
	Status AvatarResponseStatus `json:"status"`

	// Themes Avatar themes are the different appearances of the avatar, each with its own key image and live video.
	Themes *[]PresignedAvatarTheme `json:"themes"`

	// UserId User ID of the owner of this avatar
	UserId string `json:"user_id"`
}

// AvatarResponseStatus Status of the avatar, either 'PENDING', 'BUILDING', 'READY' or 'ERROR'
type AvatarResponseStatus string

// CreateApiTokenOutput defines model for CreateApiTokenOutput.
type CreateApiTokenOutput struct {
	// AuthTokenType Type of the authentication token used for this API user. Possible values are 'api_token', 'jwt_token'
	AuthTokenType string `json:"auth_token_type"`

	// CreatedAt Creation timestamp of the API token
	CreatedAt time.Time `json:"created_at"`

	// Events List of events associated with the API user, such as transaction events
	Events *map[string]interface{} `json:"events,omitempty"`

	// Hint Hint for the API token, used for displaying in the UI
	Hint string `json:"hint"`

	// IsDelinquent Indicates if the API user is delinquent, e.g., negative credits, unpaid bills
	IsDelinquent bool `json:"is_delinquent"`

	// Label Label for the API token, used for describing the purpose of the token
	Label string `json:"label"`
	Token string `json:"token"`

	// TokenId Unique identifier for the API token. Empty if user authenticated by jwt session.
	TokenId string `json:"token_id"`

	// Type Type of the API user. Default to 'user'
	Type string `json:"type"`

	// UserId User ID of the API token owner
	UserId string `json:"user_id"`
}

// CreateTokenApiRequestBody defines model for CreateTokenApiRequestBody.
type CreateTokenApiRequestBody struct {
	// Label Label for the API token
	Label string `json:"label"`
}

// CreateTokenApiResponseBody defines model for CreateTokenApiResponseBody.
type CreateTokenApiResponseBody struct {
	Data CreateApiTokenOutput `json:"data"`
}

// DataStruct defines model for DataStruct.
type DataStruct = map[string]interface{}

// DeleteVoiceProfileApiResponseBody defines model for DeleteVoiceProfileApiResponseBody.
type DeleteVoiceProfileApiResponseBody struct {
	Data DataStruct `json:"data"`
}

// DummyResponseToTriggerTransformerBody defines model for DummyResponseToTriggerTransformerBody.
type DummyResponseToTriggerTransformerBody struct {
	// Message A dummy response
	Message string `json:"message"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Location Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
	Location *string `json:"location,omitempty"`

	// Message Error message text
	Message *string `json:"message,omitempty"`

	// Value The value at the given location
	Value interface{} `json:"value,omitempty"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Errors Optional list of individual error details
	Errors *[]ErrorDetail `json:"errors"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status HTTP status code
	Status *int64 `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
	Title *string `json:"title,omitempty"`

	// Type A URI reference to human-readable documentation for the error.
	Type *string `json:"type,omitempty"`
}

// FinetuningMetadata defines model for FinetuningMetadata.
type FinetuningMetadata struct {
	Extra    map[string]interface{} `json:"Extra"`
	RefAudio *RemoteFile            `json:"ref_audio,omitempty"`
}

// FinetuningOutputInternal defines model for FinetuningOutputInternal.
type FinetuningOutputInternal struct {
	Error    *string             `json:"error,omitempty"`
	Id       *string             `json:"id,omitempty"`
	MetaData *FinetuningMetadata `json:"meta_data,omitempty"`

	// ModelInferParams The inference parameters for the model
	ModelInferParams *map[string]interface{} `json:"model_infer_params,omitempty"`
	ProfileId        *string                 `json:"profile_id,omitempty"`
	TrainTime        float32                 `json:"train_time"`
}

// FinetuningStatusApiResponseBody defines model for FinetuningStatusApiResponseBody.
type FinetuningStatusApiResponseBody struct {
	Data *FinetuningTaskOutput `json:"data,omitempty"`
}

// FinetuningTaskOutput defines model for FinetuningTaskOutput.
type FinetuningTaskOutput struct {
	// Error Error message if any
	Error *string `json:"error,omitempty"`

	// MetaData Additional metadata about the finetuning process
	MetaData *map[string]interface{} `json:"meta_data,omitempty"`

	// ProfileId The profile ID of the custom voice model
	ProfileId *string `json:"profile_id,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status FinetuningTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// FinetuningTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type FinetuningTaskOutputStatus string

// GenerateAvatarMotionOutputInternal defines model for GenerateAvatarMotionOutputInternal.
type GenerateAvatarMotionOutputInternal struct {
	// EngineProcessingTime Model inference time in seconds.
	EngineProcessingTime *float32 `json:"engine_processing_time,omitempty"`

	// Error Error message if any
	Error *string `json:"error,omitempty"`

	// OutputDuration The duration of the output video in seconds.
	OutputDuration *float64 `json:"output_duration,omitempty"`

	// ProcessingInfo Additional info about the processing.
	ProcessingInfo *string `json:"processing_info,omitempty"`

	// RequestId The id of the request
	RequestId string `json:"request_id"`

	// ResultB64Str The base64-encoded MP4 video output. Only available when the result_type is 'b64_str'.
	ResultB64Str *string     `json:"result_b64_str,omitempty"`
	ResultS3Info *RemoteFile `json:"result_s3_info,omitempty"`

	// TotalProcessingTime Total processing time in seconds.
	TotalProcessingTime *float32 `json:"total_processing_time,omitempty"`
}

// GenerateAvatarMotionStatusApiResponseBody defines model for GenerateAvatarMotionStatusApiResponseBody.
type GenerateAvatarMotionStatusApiResponseBody struct {
	Data *GenerateAvatarMotionTaskOutput `json:"data,omitempty"`
}

// GenerateAvatarMotionTaskOutput defines model for GenerateAvatarMotionTaskOutput.
type GenerateAvatarMotionTaskOutput struct {
	// Error Error message if any
	Error *string `json:"error,omitempty"`

	// FileUrl The URL of the output MP4 video.
	FileUrl *string `json:"file_url,omitempty"`

	// OutputDuration The duration of the output video in seconds.
	OutputDuration *float64 `json:"output_duration,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateAvatarMotionTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateAvatarMotionTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateAvatarMotionTaskOutputStatus string

// GenerateAvatarMotionWebhookRequestBody defines model for GenerateAvatarMotionWebhookRequestBody.
type GenerateAvatarMotionWebhookRequestBody struct {
	// DelayTime The time taken to process the request
	DelayTime int64 `json:"delayTime"`

	// Error The error message if any
	Error *string `json:"error,omitempty"`

	// ExecutionTime The time taken to process the request
	ExecutionTime int64 `json:"executionTime"`

	// Id The id of the request
	Id     string                              `json:"id"`
	Output *GenerateAvatarMotionOutputInternal `json:"output,omitempty"`

	// Status The status of the request. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status               string                 `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GenerateAvatarOutput defines model for GenerateAvatarOutput.
type GenerateAvatarOutput struct {
	// Image The generated avatar image, in base64 format
	Image *string `json:"image,omitempty"`
}

// GenerateAvatarStatusApiResponseBody defines model for GenerateAvatarStatusApiResponseBody.
type GenerateAvatarStatusApiResponseBody struct {
	Data *GenerateAvatarTaskOutput `json:"data,omitempty"`
}

// GenerateAvatarTaskOutput defines model for GenerateAvatarTaskOutput.
type GenerateAvatarTaskOutput struct {
	// Image The generated avatar image, in base64 format
	Image *string `json:"image,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateAvatarTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateAvatarTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateAvatarTaskOutputStatus string

// GenerateImageStatusApiResponseBody defines model for GenerateImageStatusApiResponseBody.
type GenerateImageStatusApiResponseBody struct {
	Data *GenerateTaskOutput `json:"data,omitempty"`
}

// GenerateTalkingAvatarOutputInternal defines model for GenerateTalkingAvatarOutputInternal.
type GenerateTalkingAvatarOutputInternal struct {
	B64VideoStr *string `json:"b64_video_str,omitempty"`

	// Error Error message if any
	Error     *string `json:"error,omitempty"`
	Id        string  `json:"id"`
	InferTime float32 `json:"infer_time"`

	// OutputDuration The duration of the output video in seconds.
	OutputDuration *float64    `json:"output_duration,omitempty"`
	S3Info         *RemoteFile `json:"s3_info,omitempty"`
}

// GenerateTalkingAvatarStatusApiResponseBody defines model for GenerateTalkingAvatarStatusApiResponseBody.
type GenerateTalkingAvatarStatusApiResponseBody struct {
	Data *GenerateTalkingAvatarTaskOutput `json:"data,omitempty"`
}

// GenerateTalkingAvatarTaskOutput defines model for GenerateTalkingAvatarTaskOutput.
type GenerateTalkingAvatarTaskOutput struct {
	// Error Error message if any
	Error *string `json:"error,omitempty"`

	// FileUrl The URL of the output MP4 video.
	FileUrl *string `json:"file_url,omitempty"`

	// OutputDuration The duration of the output video in seconds.
	OutputDuration *float64 `json:"output_duration,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateTalkingAvatarTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateTalkingAvatarTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateTalkingAvatarTaskOutputStatus string

// GenerateTalkingAvatarWebhookRequestBody defines model for GenerateTalkingAvatarWebhookRequestBody.
type GenerateTalkingAvatarWebhookRequestBody struct {
	// DelayTime The time taken to process the request
	DelayTime int64 `json:"delayTime"`

	// Error The error message if any
	Error *string `json:"error,omitempty"`

	// ExecutionTime The time taken to process the request
	ExecutionTime int64 `json:"executionTime"`

	// Id The id of the request
	Id     string                               `json:"id"`
	Output *GenerateTalkingAvatarOutputInternal `json:"output,omitempty"`

	// Status The status of the request. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status               string                 `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GenerateTaskOutput defines model for GenerateTaskOutput.
type GenerateTaskOutput struct {
	// Image The generated image in JPG format, encoded in base64.
	Image *string `json:"image,omitempty"`

	// Status The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
	Status GenerateTaskOutputStatus `json:"status"`

	// TaskId The id of the async task
	TaskId string `json:"task_id"`
}

// GenerateTaskOutputStatus The status of the async task. Possible values are 'IN_QUEUE', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED', 'TIMED_OUT'
type GenerateTaskOutputStatus string

// GetApiUserMetadataResponseBody defines model for GetApiUserMetadataResponseBody.
type GetApiUserMetadataResponseBody struct {
	Data ApiUserMetadata `json:"data"`
}

// GetAvatarApiResponseBody defines model for GetAvatarApiResponseBody.
type GetAvatarApiResponseBody struct {
	Data AvatarResponse `json:"data"`
}

// GetAvatarSystemProfileApiResponseBody defines model for GetAvatarSystemProfileApiResponseBody.
type GetAvatarSystemProfileApiResponseBody struct {
	Data PresignedAvatarSystemProfile `json:"data"`
}

// GetPremadeProfilesApiResponseBody defines model for GetPremadeProfilesApiResponseBody.
type GetPremadeProfilesApiResponseBody struct {
	// Data List of premade voice profiles
	Data *[]PresignedVoiceProfile `json:"data"`
}

// GetSessionProfileApiResponseBody defines model for GetSessionProfileApiResponseBody.
type GetSessionProfileApiResponseBody struct {
	Data *MetisSessionProfile `json:"data,omitempty"`
}

// GetSystemProfileApiResponseBody defines model for GetSystemProfileApiResponseBody.
type GetSystemProfileApiResponseBody struct {
	Data *PresignedVoiceSystemProfile `json:"data,omitempty"`
}

// GetUserAvatarListApiResponseBody defines model for GetUserAvatarListApiResponseBody.
type GetUserAvatarListApiResponseBody struct {
	// Data List of avatars for the user
	Data *[]AvatarResponse `json:"data"`
}

// GetVoiceProfileApiResponseBody defines model for GetVoiceProfileApiResponseBody.
type GetVoiceProfileApiResponseBody struct {
	Data PresignedVoiceProfile `json:"data"`
}

// GetVoiceProfilesApiResponseBody defines model for GetVoiceProfilesApiResponseBody.
type GetVoiceProfilesApiResponseBody struct {
	// Data List of user custom voice profiles
	Data *[]PresignedVoiceProfile `json:"data"`
}

// LaunchApiRequestBody defines model for LaunchApiRequestBody.
type LaunchApiRequestBody struct {
	// Model The interactive model version to be launched.
	Model string `json:"model"`

	// Opts Additional options for the instance launch, such as countryCode, gpuTypeIds etc
	Opts *map[string]interface{} `json:"opts,omitempty"`

	// SessionGroup The session group name for the instance. Default session group will be used if it left unspecfied or empty.
	SessionGroup *string `json:"session_group,omitempty"`
}

// LaunchApiResponseBody defines model for LaunchApiResponseBody.
type LaunchApiResponseBody struct {
	Data *MetisInstance `json:"data,omitempty"`
}

// ListApiTokensApiResponseBody defines model for ListApiTokensApiResponseBody.
type ListApiTokensApiResponseBody struct {
	// Data List of API tokens for the user
	Data *[]ApiTokenRecord `json:"data"`
}

// ListSessionsApiResponseBody defines model for ListSessionsApiResponseBody.
type ListSessionsApiResponseBody struct {
	// Data List of active interactive sessions
	Data *[]MetisSession `json:"data"`
}

// Machine defines model for Machine.
type Machine struct {
	CpuTypeId        *string     `json:"cpuTypeId,omitempty"`
	GpuAvailable     *int64      `json:"gpuAvailable,omitempty"`
	GpuTypeId        *string     `json:"gpuTypeId,omitempty"`
	MaintenanceEnd   *RunpodTime `json:"maintenanceEnd,omitempty"`
	MaintenanceNote  *string     `json:"maintenanceNote,omitempty"`
	MaintenanceStart *RunpodTime `json:"maintenanceStart,omitempty"`
	SecureCloud      *bool       `json:"secureCloud,omitempty"`
}

// MetisInstance defines model for MetisInstance.
type MetisInstance struct {
	InstanceId string     `json:"instance_id"`
	LaunchTime *time.Time `json:"launch_time,omitempty"`
	Machine    *Machine   `json:"machine,omitempty"`
	MetisModel string     `json:"metis_model"`
	State      string     `json:"state"`
	UserId     *string    `json:"user_id,omitempty"`
}

// MetisSession defines model for MetisSession.
type MetisSession struct {
	Avatar MetisSessionAvatar `json:"avatar"`

	// IdleTimeout Idle timeout duration in minutes
	IdleTimeout *int64 `json:"idle_timeout,omitempty"`

	// MetisModel The Metis model used in the session
	MetisModel *string `json:"metis_model,omitempty"`

	// SessionId Unique identifier for the session
	SessionId *string `json:"session_id,omitempty"`

	// StartTime Timestamp when the session started in RFC3339 format
	StartTime time.Time `json:"start_time"`

	// State Current state of the session
	State *string `json:"state,omitempty"`

	// UserId User ID of the session owner
	UserId *string `json:"user_id,omitempty"`
}

// MetisSessionAvatar defines model for MetisSessionAvatar.
type MetisSessionAvatar struct {
	// Id Unique identifier for the avatar
	Id *string `json:"id,omitempty"`

	// Name Name of the avatar
	Name *string `json:"name,omitempty"`
}

// MetisSessionProfile defines model for MetisSessionProfile.
type MetisSessionProfile struct {
	Avatar       PresignedAvatarSystemProfile `json:"avatar"`
	SessionId    string                       `json:"session_id"`
	SessionToken string                       `json:"session_token"`
}

// PresignedAvatarSystemProfile defines model for PresignedAvatarSystemProfile.
type PresignedAvatarSystemProfile struct {
	Id           string    `json:"id"`
	Image        *string   `json:"image,omitempty"`
	Liveportrait *[]string `json:"liveportrait"`
	Name         string    `json:"name"`
}

// PresignedAvatarTheme defines model for PresignedAvatarTheme.
type PresignedAvatarTheme struct {
	// KeyImage URL of the key portrait image of the avatar in this theme.
	KeyImage *string `json:"key_image,omitempty"`

	// LiveVideo URL of the live video for the avatar in this theme.
	LiveVideo *string `json:"live_video,omitempty"`

	// Name Name of the avatar theme
	Name string `json:"name"`
}

// PresignedVoiceProfile defines model for PresignedVoiceProfile.
type PresignedVoiceProfile struct {
	// CreatedAt The creation date of the voice profile.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description The description of the voice profile.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the voice profile.
	Id string `json:"id"`

	// IsPremade Whether the voice profile is a default premade profile.
	IsPremade *bool `json:"is_premade,omitempty"`

	// Languages The languages supported by the voice profile.
	Languages *[]string `json:"languages"`

	// Name The name of the voice profile.
	Name *string `json:"name,omitempty"`

	// SampleClip The URL of a sample audio clip for the voice profile.
	SampleClip *string `json:"sample_clip,omitempty"`

	// Status The status of the voice profile.
	Status *string `json:"status,omitempty"`

	// UserId The user ID of the owner associated with the voice profile.
	UserId *string `json:"user_id,omitempty"`
}

// PresignedVoiceSystemProfile defines model for PresignedVoiceSystemProfile.
type PresignedVoiceSystemProfile struct {
	// CreatedAt The creation date of the voice profile.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description The description of the voice profile.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the voice profile.
	Id string `json:"id"`

	// IsPremade Whether the voice profile is a default premade profile.
	IsPremade *bool `json:"is_premade,omitempty"`

	// Languages The languages supported by the voice profile.
	Languages *[]string `json:"languages"`

	// Name The name of the voice profile.
	Name *string `json:"name,omitempty"`

	// Params The parameters used for the voice model.
	Params *map[string]interface{} `json:"params,omitempty"`

	// SampleClip The URL of a sample audio clip for the voice profile.
	SampleClip *string `json:"sample_clip,omitempty"`

	// ServiceName The name of the voice service used for this profile.
	ServiceName *string `json:"service_name,omitempty"`

	// Status The status of the voice profile.
	Status *string `json:"status,omitempty"`

	// UserId The user ID of the owner associated with the voice profile.
	UserId *string `json:"user_id,omitempty"`
}

// PrivateApiResponseBody defines model for PrivateApiResponseBody.
type PrivateApiResponseBody struct {
	// Message A simple hello world message for private API access
	Message string `json:"message"`
}

// RemoteFile defines model for RemoteFile.
type RemoteFile struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
	Region string `json:"region"`
}

// RunpodTime defines model for RunpodTime.
type RunpodTime = map[string]interface{}

// STTApiRequestBody defines model for STTApiRequestBody.
type STTApiRequestBody struct {
	// Audio Base64 encoded audio data
	Audio string `json:"audio"`
}

// STTApiResponseBody defines model for STTApiResponseBody.
type STTApiResponseBody struct {
	Data *STTOutput `json:"data,omitempty"`
}

// STTOutput defines model for STTOutput.
type STTOutput struct {
	// Id The unique request ID
	Id string `json:"id"`

	// InputDuration The duration of the input audio in seconds.
	InputDuration *float64 `json:"input_duration,omitempty"`

	// Text The transcribed text
	Text string `json:"text"`

	// Transcription The transcription of the audio
	Transcription *[]interface{} `json:"transcription"`
}

// StartSessionApiRequestBody defines model for StartSessionApiRequestBody.
type StartSessionApiRequestBody struct {
	// AvatarId The avatar id
	AvatarId string `json:"avatar_id"`

	// IdleTimeout Idle timeout in mins. The default value is 15 minutes if not specified. Setting it to -1 will disable the idle timeout, making the session never auto-terminate due to inactivity.
	IdleTimeout *int64 `json:"idle_timeout,omitempty"`

	// Instruction The instruction prompt for the avatar in the session
	Instruction string `json:"instruction"`

	// LlmModel The LLM model to be used for generating avatar's response
	LlmModel string `json:"llm_model"`

	// Model The interactive model version. The default model used is 'metis-2.5'
	Model *StartSessionApiRequestBodyModel `json:"model,omitempty"`

	// Tools The tools to be used in the session
	Tools *string `json:"tools,omitempty"`

	// VoiceProfileId The voice profile id
	VoiceProfileId string `json:"voice_profile_id"`
}

// StartSessionApiRequestBodyModel The interactive model version. The default model used is 'metis-2.5'
type StartSessionApiRequestBodyModel string

// StartSessionApiResponseBody defines model for StartSessionApiResponseBody.
type StartSessionApiResponseBody struct {
	Data *StartSessionOutput `json:"data,omitempty"`
}

// StartSessionOutput defines model for StartSessionOutput.
type StartSessionOutput struct {
	Session MetisSession `json:"session"`

	// SessionToken The session token for the started session
	SessionToken string `json:"session_token"`
}

// StopSessionOutput defines model for StopSessionOutput.
type StopSessionOutput struct {
	// StoppedSessions The list of stopped session IDs
	StoppedSessions *[]string `json:"stopped_sessions"`
}

// StopSessionsApiRequestBody defines model for StopSessionsApiRequestBody.
type StopSessionsApiRequestBody struct {
	// SessionIds The id of the sessions to be stopped
	SessionIds *[]string `json:"session_ids"`
}

// StopSessionsApiResponseBody defines model for StopSessionsApiResponseBody.
type StopSessionsApiResponseBody struct {
	Data *StopSessionOutput `json:"data,omitempty"`
}

// TTSApiRequestBody defines model for TTSApiRequestBody.
type TTSApiRequestBody struct {
	// ChineseLanguage This param tells the TTS to use the chinese language dialect to generate audio, and only required when generating audio with Mandarin or Cantonese. Currently supports 'mandarin' and 'yue' (i.e. Cantonese) variants.
	ChineseLanguage *TTSApiRequestBodyChineseLanguage `json:"chinese_language,omitempty"`
	Opts            *TTSParams                        `json:"opts,omitempty"`

	// ReturnType Return type of the audio, either 'b64_audio_str' or 'file_url'.
	ReturnType string `json:"return_type"`

	// Text Text to be converted to speech
	Text string `json:"text"`

	// VoiceProfileId Voice profile ID
	VoiceProfileId string `json:"voice_profile_id"`
}

// TTSApiRequestBodyChineseLanguage This param tells the TTS to use the chinese language dialect to generate audio, and only required when generating audio with Mandarin or Cantonese. Currently supports 'mandarin' and 'yue' (i.e. Cantonese) variants.
type TTSApiRequestBodyChineseLanguage string

// TTSApiResponseBody defines model for TTSApiResponseBody.
type TTSApiResponseBody struct {
	Data *TTSOutput `json:"data,omitempty"`
}

// TTSOutput defines model for TTSOutput.
type TTSOutput struct {
	// B64AudioStr The PCM s16 audio data encoded as a base64 string. Only available when the return_type is 'b64_audio_str'.
	B64AudioStr *string `json:"b64_audio_str,omitempty"`

	// FileUrl The URL of the audio file. Only available when the return_type is 'file_url'.
	FileUrl *string `json:"file_url,omitempty"`

	// Id The unique request ID
	Id string `json:"id"`

	// OutputDuration The duration of the output audio in seconds.
	OutputDuration *float64 `json:"output_duration,omitempty"`

	// VoiceProfileId The voice profile ID used for TTS
	VoiceProfileId string `json:"voice_profile_id"`
}

// TTSParams defines model for TTSParams.
type TTSParams struct {
	// FragmentInterval Control the length of pause between sentenses. Default is 0.1.
	FragmentInterval *float32 `json:"fragment_interval,omitempty"`

	// Temperature The temperature for the TTS model, controls the randomness of the output. Default is 1.0.
	Temperature *float32 `json:"temperature,omitempty"`
}

// TerminateApiRequestBody defines model for TerminateApiRequestBody.
type TerminateApiRequestBody struct {
	// InstanceId The id of the instances to be terminated
	InstanceId *[]string `json:"instance_id"`
}

// TerminateApiResponseBody defines model for TerminateApiResponseBody.
type TerminateApiResponseBody struct {
	Data *TerminateInstancesOutput `json:"data,omitempty"`
}

// TerminateInstancesOutput defines model for TerminateInstancesOutput.
type TerminateInstancesOutput struct {
	// TerminatedInstances The list of terminated instance IDs
	TerminatedInstances *[]string `json:"terminated_instances"`
}

// Webhook defines model for Webhook.
type Webhook struct {
	// AuthToken Auth token used to authenticate the webhook via 'Authorization: Bearer' header
	AuthToken *string `json:"auth_token,omitempty"`

	// Url Webhook URL to receive the async task status
	Url string `json:"url"`
}

// CloneVoiceAsyncMultipartBody defines parameters for CloneVoiceAsync.
type CloneVoiceAsyncMultipartBody struct {
	// AnnotationList The annotation file for the voice cloning task
	AnnotationList openapi_types.File   `json:"annotation_list"`
	AudioSamples   []openapi_types.File `json:"audio_samples"`

	// CleanData Specify whether de-noise processing should be performed. Default is False.
	CleanData *bool `json:"clean_data,omitempty"`

	// Description Optional description for the new voice profile.
	Description *string `json:"description,omitempty"`

	// Name The name of the new voice profile to be created. If not provided, a default name will be generated.
	Name *string `json:"name,omitempty"`

	// Webhook Optional webhook url to notify when the task is completed
	Webhook *string `json:"webhook,omitempty"`

	// WebhookAuth Auth token for webhook authentication
	WebhookAuth *string `json:"webhook_auth,omitempty"`
}

// BuildAvatarAsyncJSONRequestBody defines body for BuildAvatarAsync for application/json ContentType.
type BuildAvatarAsyncJSONRequestBody = AsyncBuildApiRequestBody

// GenerateAvatarAsyncJSONRequestBody defines body for GenerateAvatarAsync for application/json ContentType.
type GenerateAvatarAsyncJSONRequestBody = AsyncGenerateAvatarApiRequestBody

// GenerateImageAsyncJSONRequestBody defines body for GenerateImageAsync for application/json ContentType.
type GenerateImageAsyncJSONRequestBody = AsyncGenerateImageApiRequestBody

// StartInteractiveSessionJSONRequestBody defines body for StartInteractiveSession for application/json ContentType.
type StartInteractiveSessionJSONRequestBody = StartSessionApiRequestBody

// StopInteractiveSessionsJSONRequestBody defines body for StopInteractiveSessions for application/json ContentType.
type StopInteractiveSessionsJSONRequestBody = StopSessionsApiRequestBody

// ConvertSpeechToTextJSONRequestBody defines body for ConvertSpeechToText for application/json ContentType.
type ConvertSpeechToTextJSONRequestBody = STTApiRequestBody

// ConvertTextToSpeechJSONRequestBody defines body for ConvertTextToSpeech for application/json ContentType.
type ConvertTextToSpeechJSONRequestBody = TTSApiRequestBody

// GenerateAvatarMotionAsyncJSONRequestBody defines body for GenerateAvatarMotionAsync for application/json ContentType.
type GenerateAvatarMotionAsyncJSONRequestBody = AsyncGenerateAvatarMotionApiRequestBody

// GenerateTalkingAvatarAsyncJSONRequestBody defines body for GenerateTalkingAvatarAsync for application/json ContentType.
type GenerateTalkingAvatarAsyncJSONRequestBody = AsyncGenerateTalkingAvatarApiRequestBody

// CloneVoiceAsyncMultipartRequestBody defines body for CloneVoiceAsync for multipart/form-data ContentType.
type CloneVoiceAsyncMultipartRequestBody CloneVoiceAsyncMultipartBody

// Getter for additional properties for AsyncFinetunningWebhookRequestBody. Returns the specified
// element and whether it was found
func (a AsyncFinetunningWebhookRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AsyncFinetunningWebhookRequestBody
func (a *AsyncFinetunningWebhookRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AsyncFinetunningWebhookRequestBody to handle AdditionalProperties
func (a *AsyncFinetunningWebhookRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["delayTime"]; found {
		err = json.Unmarshal(raw, &a.DelayTime)
		if err != nil {
			return fmt.Errorf("error reading 'delayTime': %w", err)
		}
		delete(object, "delayTime")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["executionTime"]; found {
		err = json.Unmarshal(raw, &a.ExecutionTime)
		if err != nil {
			return fmt.Errorf("error reading 'executionTime': %w", err)
		}
		delete(object, "executionTime")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["output"]; found {
		err = json.Unmarshal(raw, &a.Output)
		if err != nil {
			return fmt.Errorf("error reading 'output': %w", err)
		}
		delete(object, "output")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AsyncFinetunningWebhookRequestBody to handle AdditionalProperties
func (a AsyncFinetunningWebhookRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["delayTime"], err = json.Marshal(a.DelayTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'delayTime': %w", err)
	}

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	object["executionTime"], err = json.Marshal(a.ExecutionTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'executionTime': %w", err)
	}

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if a.Output != nil {
		object["output"], err = json.Marshal(a.Output)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'output': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AsyncGenerateAvatarWebhookRequestBody. Returns the specified
// element and whether it was found
func (a AsyncGenerateAvatarWebhookRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AsyncGenerateAvatarWebhookRequestBody
func (a *AsyncGenerateAvatarWebhookRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AsyncGenerateAvatarWebhookRequestBody to handle AdditionalProperties
func (a *AsyncGenerateAvatarWebhookRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["delayTime"]; found {
		err = json.Unmarshal(raw, &a.DelayTime)
		if err != nil {
			return fmt.Errorf("error reading 'delayTime': %w", err)
		}
		delete(object, "delayTime")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["executionTime"]; found {
		err = json.Unmarshal(raw, &a.ExecutionTime)
		if err != nil {
			return fmt.Errorf("error reading 'executionTime': %w", err)
		}
		delete(object, "executionTime")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["output"]; found {
		err = json.Unmarshal(raw, &a.Output)
		if err != nil {
			return fmt.Errorf("error reading 'output': %w", err)
		}
		delete(object, "output")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AsyncGenerateAvatarWebhookRequestBody to handle AdditionalProperties
func (a AsyncGenerateAvatarWebhookRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["delayTime"], err = json.Marshal(a.DelayTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'delayTime': %w", err)
	}

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	object["executionTime"], err = json.Marshal(a.ExecutionTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'executionTime': %w", err)
	}

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if a.Output != nil {
		object["output"], err = json.Marshal(a.Output)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'output': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GenerateAvatarMotionWebhookRequestBody. Returns the specified
// element and whether it was found
func (a GenerateAvatarMotionWebhookRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GenerateAvatarMotionWebhookRequestBody
func (a *GenerateAvatarMotionWebhookRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GenerateAvatarMotionWebhookRequestBody to handle AdditionalProperties
func (a *GenerateAvatarMotionWebhookRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["delayTime"]; found {
		err = json.Unmarshal(raw, &a.DelayTime)
		if err != nil {
			return fmt.Errorf("error reading 'delayTime': %w", err)
		}
		delete(object, "delayTime")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["executionTime"]; found {
		err = json.Unmarshal(raw, &a.ExecutionTime)
		if err != nil {
			return fmt.Errorf("error reading 'executionTime': %w", err)
		}
		delete(object, "executionTime")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["output"]; found {
		err = json.Unmarshal(raw, &a.Output)
		if err != nil {
			return fmt.Errorf("error reading 'output': %w", err)
		}
		delete(object, "output")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GenerateAvatarMotionWebhookRequestBody to handle AdditionalProperties
func (a GenerateAvatarMotionWebhookRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["delayTime"], err = json.Marshal(a.DelayTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'delayTime': %w", err)
	}

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	object["executionTime"], err = json.Marshal(a.ExecutionTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'executionTime': %w", err)
	}

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if a.Output != nil {
		object["output"], err = json.Marshal(a.Output)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'output': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GenerateTalkingAvatarWebhookRequestBody. Returns the specified
// element and whether it was found
func (a GenerateTalkingAvatarWebhookRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GenerateTalkingAvatarWebhookRequestBody
func (a *GenerateTalkingAvatarWebhookRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GenerateTalkingAvatarWebhookRequestBody to handle AdditionalProperties
func (a *GenerateTalkingAvatarWebhookRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["delayTime"]; found {
		err = json.Unmarshal(raw, &a.DelayTime)
		if err != nil {
			return fmt.Errorf("error reading 'delayTime': %w", err)
		}
		delete(object, "delayTime")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["executionTime"]; found {
		err = json.Unmarshal(raw, &a.ExecutionTime)
		if err != nil {
			return fmt.Errorf("error reading 'executionTime': %w", err)
		}
		delete(object, "executionTime")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["output"]; found {
		err = json.Unmarshal(raw, &a.Output)
		if err != nil {
			return fmt.Errorf("error reading 'output': %w", err)
		}
		delete(object, "output")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GenerateTalkingAvatarWebhookRequestBody to handle AdditionalProperties
func (a GenerateTalkingAvatarWebhookRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["delayTime"], err = json.Marshal(a.DelayTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'delayTime': %w", err)
	}

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	object["executionTime"], err = json.Marshal(a.ExecutionTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'executionTime': %w", err)
	}

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if a.Output != nil {
		object["output"], err = json.Marshal(a.Output)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'output': %w", err)
		}
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BuildAvatarAsyncWithBody request with any body
	BuildAvatarAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BuildAvatarAsync(ctx context.Context, body BuildAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateAvatarAsyncWithBody request with any body
	GenerateAvatarAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateAvatarAsync(ctx context.Context, body GenerateAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvatarGenerationStatus request
	GetAvatarGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAvatarList request
	GetUserAvatarList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAvatar request
	DeleteAvatar(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvatarById request
	GetAvatarById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateImageAsyncWithBody request with any body
	GenerateImageAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateImageAsync(ctx context.Context, body GenerateImageAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetImageGenerationStatus request
	GetImageGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInteractiveSessions request
	ListInteractiveSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSessionProfile request
	GetSessionProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartInteractiveSessionWithBody request with any body
	StartInteractiveSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartInteractiveSession(ctx context.Context, body StartInteractiveSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopInteractiveSessionsWithBody request with any body
	StopInteractiveSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StopInteractiveSessions(ctx context.Context, body StopInteractiveSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertSpeechToTextWithBody request with any body
	ConvertSpeechToTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertSpeechToText(ctx context.Context, body ConvertSpeechToTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConvertTextToSpeechWithBody request with any body
	ConvertTextToSpeechWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConvertTextToSpeech(ctx context.Context, body ConvertTextToSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateAvatarMotionAsyncWithBody request with any body
	GenerateAvatarMotionAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateAvatarMotionAsync(ctx context.Context, body GenerateAvatarMotionAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvatarMotionGenerationStatus request
	GetAvatarMotionGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateTalkingAvatarAsyncWithBody request with any body
	GenerateTalkingAvatarAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateTalkingAvatarAsync(ctx context.Context, body GenerateTalkingAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTalkingAvatarGenerationStatus request
	GetTalkingAvatarGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneVoiceAsyncWithBody request with any body
	CloneVoiceAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoiceCloningStatus request
	GetVoiceCloningStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPremadeVoiceProfiles request
	GetPremadeVoiceProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserVoiceProfiles request
	GetUserVoiceProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVoiceProfile request
	DeleteVoiceProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVoiceProfile request
	GetVoiceProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BuildAvatarAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildAvatarAsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BuildAvatarAsync(ctx context.Context, body BuildAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildAvatarAsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAvatarAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvatarAsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAvatarAsync(ctx context.Context, body GenerateAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvatarAsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvatarGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvatarGenerationStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAvatarList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAvatarListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAvatar(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAvatarRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvatarById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvatarByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateImageAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateImageAsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateImageAsync(ctx context.Context, body GenerateImageAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateImageAsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetImageGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetImageGenerationStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInteractiveSessions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInteractiveSessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSessionProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSessionProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartInteractiveSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartInteractiveSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartInteractiveSession(ctx context.Context, body StartInteractiveSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartInteractiveSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopInteractiveSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopInteractiveSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopInteractiveSessions(ctx context.Context, body StopInteractiveSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopInteractiveSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertSpeechToTextWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertSpeechToTextRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertSpeechToText(ctx context.Context, body ConvertSpeechToTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertSpeechToTextRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertTextToSpeechWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertTextToSpeechRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConvertTextToSpeech(ctx context.Context, body ConvertTextToSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConvertTextToSpeechRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAvatarMotionAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvatarMotionAsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAvatarMotionAsync(ctx context.Context, body GenerateAvatarMotionAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvatarMotionAsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvatarMotionGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvatarMotionGenerationStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTalkingAvatarAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTalkingAvatarAsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTalkingAvatarAsync(ctx context.Context, body GenerateTalkingAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTalkingAvatarAsyncRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTalkingAvatarGenerationStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTalkingAvatarGenerationStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneVoiceAsyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneVoiceAsyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoiceCloningStatus(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoiceCloningStatusRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPremadeVoiceProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPremadeVoiceProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserVoiceProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserVoiceProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVoiceProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVoiceProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoiceProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVoiceProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBuildAvatarAsyncRequest calls the generic BuildAvatarAsync builder with application/json body
func NewBuildAvatarAsyncRequest(server string, body BuildAvatarAsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuildAvatarAsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewBuildAvatarAsyncRequestWithBody generates requests for BuildAvatarAsync with any type of body
func NewBuildAvatarAsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/async_build")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateAvatarAsyncRequest calls the generic GenerateAvatarAsync builder with application/json body
func NewGenerateAvatarAsyncRequest(server string, body GenerateAvatarAsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateAvatarAsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateAvatarAsyncRequestWithBody generates requests for GenerateAvatarAsync with any type of body
func NewGenerateAvatarAsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/async_generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvatarGenerationStatusRequest generates requests for GetAvatarGenerationStatus
func NewGetAvatarGenerationStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/async_generate/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAvatarListRequest generates requests for GetUserAvatarList
func NewGetUserAvatarListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAvatarRequest generates requests for DeleteAvatar
func NewDeleteAvatarRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAvatarByIdRequest generates requests for GetAvatarById
func NewGetAvatarByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/avatar/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateImageAsyncRequest calls the generic GenerateImageAsync builder with application/json body
func NewGenerateImageAsyncRequest(server string, body GenerateImageAsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateImageAsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateImageAsyncRequestWithBody generates requests for GenerateImageAsync with any type of body
func NewGenerateImageAsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/image/async_generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetImageGenerationStatusRequest generates requests for GetImageGenerationStatus
func NewGetImageGenerationStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/image/async_generate/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInteractiveSessionsRequest generates requests for ListInteractiveSessions
func NewListInteractiveSessionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSessionProfileRequest generates requests for GetSessionProfile
func NewGetSessionProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/session/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartInteractiveSessionRequest calls the generic StartInteractiveSession builder with application/json body
func NewStartInteractiveSessionRequest(server string, body StartInteractiveSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartInteractiveSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewStartInteractiveSessionRequestWithBody generates requests for StartInteractiveSession with any type of body
func NewStartInteractiveSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/start_session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStopInteractiveSessionsRequest calls the generic StopInteractiveSessions builder with application/json body
func NewStopInteractiveSessionsRequest(server string, body StopInteractiveSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStopInteractiveSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewStopInteractiveSessionsRequestWithBody generates requests for StopInteractiveSessions with any type of body
func NewStopInteractiveSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/interactive/stop_sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConvertSpeechToTextRequest calls the generic ConvertSpeechToText builder with application/json body
func NewConvertSpeechToTextRequest(server string, body ConvertSpeechToTextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertSpeechToTextRequestWithBody(server, "application/json", bodyReader)
}

// NewConvertSpeechToTextRequestWithBody generates requests for ConvertSpeechToText with any type of body
func NewConvertSpeechToTextRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/speech/stt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConvertTextToSpeechRequest calls the generic ConvertTextToSpeech builder with application/json body
func NewConvertTextToSpeechRequest(server string, body ConvertTextToSpeechJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConvertTextToSpeechRequestWithBody(server, "application/json", bodyReader)
}

// NewConvertTextToSpeechRequestWithBody generates requests for ConvertTextToSpeech with any type of body
func NewConvertTextToSpeechRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/speech/tts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateAvatarMotionAsyncRequest calls the generic GenerateAvatarMotionAsync builder with application/json body
func NewGenerateAvatarMotionAsyncRequest(server string, body GenerateAvatarMotionAsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateAvatarMotionAsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateAvatarMotionAsyncRequestWithBody generates requests for GenerateAvatarMotionAsync with any type of body
func NewGenerateAvatarMotionAsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/video/async_generate_avatar_motion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvatarMotionGenerationStatusRequest generates requests for GetAvatarMotionGenerationStatus
func NewGetAvatarMotionGenerationStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/video/async_generate_avatar_motion/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateTalkingAvatarAsyncRequest calls the generic GenerateTalkingAvatarAsync builder with application/json body
func NewGenerateTalkingAvatarAsyncRequest(server string, body GenerateTalkingAvatarAsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateTalkingAvatarAsyncRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateTalkingAvatarAsyncRequestWithBody generates requests for GenerateTalkingAvatarAsync with any type of body
func NewGenerateTalkingAvatarAsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/video/async_generate_talking_avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTalkingAvatarGenerationStatusRequest generates requests for GetTalkingAvatarGenerationStatus
func NewGetTalkingAvatarGenerationStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/video/async_generate_talking_avatar/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCloneVoiceAsyncRequestWithBody generates requests for CloneVoiceAsync with any type of body
func NewCloneVoiceAsyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/clone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVoiceCloningStatusRequest generates requests for GetVoiceCloningStatus
func NewGetVoiceCloningStatusRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/clone/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPremadeVoiceProfilesRequest generates requests for GetPremadeVoiceProfiles
func NewGetPremadeVoiceProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/premade_profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserVoiceProfilesRequest generates requests for GetUserVoiceProfiles
func NewGetUserVoiceProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteVoiceProfileRequest generates requests for DeleteVoiceProfile
func NewDeleteVoiceProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVoiceProfileRequest generates requests for GetVoiceProfile
func NewGetVoiceProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/voice/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BuildAvatarAsyncWithBodyWithResponse request with any body
	BuildAvatarAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildAvatarAsyncResponse, error)

	BuildAvatarAsyncWithResponse(ctx context.Context, body BuildAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildAvatarAsyncResponse, error)

	// GenerateAvatarAsyncWithBodyWithResponse request with any body
	GenerateAvatarAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvatarAsyncResponse, error)

	GenerateAvatarAsyncWithResponse(ctx context.Context, body GenerateAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvatarAsyncResponse, error)

	// GetAvatarGenerationStatusWithResponse request
	GetAvatarGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetAvatarGenerationStatusResponse, error)

	// GetUserAvatarListWithResponse request
	GetUserAvatarListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAvatarListResponse, error)

	// DeleteAvatarWithResponse request
	DeleteAvatarWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAvatarResponse, error)

	// GetAvatarByIdWithResponse request
	GetAvatarByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAvatarByIdResponse, error)

	// GenerateImageAsyncWithBodyWithResponse request with any body
	GenerateImageAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateImageAsyncResponse, error)

	GenerateImageAsyncWithResponse(ctx context.Context, body GenerateImageAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateImageAsyncResponse, error)

	// GetImageGenerationStatusWithResponse request
	GetImageGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetImageGenerationStatusResponse, error)

	// ListInteractiveSessionsWithResponse request
	ListInteractiveSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInteractiveSessionsResponse, error)

	// GetSessionProfileWithResponse request
	GetSessionProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSessionProfileResponse, error)

	// StartInteractiveSessionWithBodyWithResponse request with any body
	StartInteractiveSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartInteractiveSessionResponse, error)

	StartInteractiveSessionWithResponse(ctx context.Context, body StartInteractiveSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*StartInteractiveSessionResponse, error)

	// StopInteractiveSessionsWithBodyWithResponse request with any body
	StopInteractiveSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopInteractiveSessionsResponse, error)

	StopInteractiveSessionsWithResponse(ctx context.Context, body StopInteractiveSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*StopInteractiveSessionsResponse, error)

	// ConvertSpeechToTextWithBodyWithResponse request with any body
	ConvertSpeechToTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertSpeechToTextResponse, error)

	ConvertSpeechToTextWithResponse(ctx context.Context, body ConvertSpeechToTextJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertSpeechToTextResponse, error)

	// ConvertTextToSpeechWithBodyWithResponse request with any body
	ConvertTextToSpeechWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertTextToSpeechResponse, error)

	ConvertTextToSpeechWithResponse(ctx context.Context, body ConvertTextToSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertTextToSpeechResponse, error)

	// GenerateAvatarMotionAsyncWithBodyWithResponse request with any body
	GenerateAvatarMotionAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvatarMotionAsyncResponse, error)

	GenerateAvatarMotionAsyncWithResponse(ctx context.Context, body GenerateAvatarMotionAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvatarMotionAsyncResponse, error)

	// GetAvatarMotionGenerationStatusWithResponse request
	GetAvatarMotionGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetAvatarMotionGenerationStatusResponse, error)

	// GenerateTalkingAvatarAsyncWithBodyWithResponse request with any body
	GenerateTalkingAvatarAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateTalkingAvatarAsyncResponse, error)

	GenerateTalkingAvatarAsyncWithResponse(ctx context.Context, body GenerateTalkingAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateTalkingAvatarAsyncResponse, error)

	// GetTalkingAvatarGenerationStatusWithResponse request
	GetTalkingAvatarGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetTalkingAvatarGenerationStatusResponse, error)

	// CloneVoiceAsyncWithBodyWithResponse request with any body
	CloneVoiceAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneVoiceAsyncResponse, error)

	// GetVoiceCloningStatusWithResponse request
	GetVoiceCloningStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetVoiceCloningStatusResponse, error)

	// GetPremadeVoiceProfilesWithResponse request
	GetPremadeVoiceProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPremadeVoiceProfilesResponse, error)

	// GetUserVoiceProfilesWithResponse request
	GetUserVoiceProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserVoiceProfilesResponse, error)

	// DeleteVoiceProfileWithResponse request
	DeleteVoiceProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteVoiceProfileResponse, error)

	// GetVoiceProfileWithResponse request
	GetVoiceProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetVoiceProfileResponse, error)
}

type BuildAvatarAsyncResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncBuildApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r BuildAvatarAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildAvatarAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateAvatarAsyncResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateAvatarApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GenerateAvatarAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateAvatarAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvatarGenerationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateAvatarStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetAvatarGenerationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvatarGenerationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAvatarListResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetUserAvatarListApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetUserAvatarListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAvatarListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAvatarResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvatarByIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetAvatarApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetAvatarByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvatarByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateImageAsyncResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateImageApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GenerateImageAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateImageAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetImageGenerationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateImageStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetImageGenerationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetImageGenerationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInteractiveSessionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ListSessionsApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r ListInteractiveSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInteractiveSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetSessionProfileApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetSessionProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartInteractiveSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *StartSessionApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r StartInteractiveSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartInteractiveSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopInteractiveSessionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *StopSessionsApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r StopInteractiveSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopInteractiveSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertSpeechToTextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *STTApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r ConvertSpeechToTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertSpeechToTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConvertTextToSpeechResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TTSApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r ConvertTextToSpeechResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConvertTextToSpeechResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateAvatarMotionAsyncResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateAvatarMotionApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GenerateAvatarMotionAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateAvatarMotionAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvatarMotionGenerationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateAvatarMotionStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetAvatarMotionGenerationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvatarMotionGenerationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTalkingAvatarAsyncResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncGenerateTalkingAvatarApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GenerateTalkingAvatarAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTalkingAvatarAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTalkingAvatarGenerationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GenerateTalkingAvatarStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetTalkingAvatarGenerationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTalkingAvatarGenerationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneVoiceAsyncResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AsyncFinetuningApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r CloneVoiceAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneVoiceAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoiceCloningStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *FinetuningStatusApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetVoiceCloningStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoiceCloningStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPremadeVoiceProfilesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetPremadeProfilesApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetPremadeVoiceProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPremadeVoiceProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserVoiceProfilesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetVoiceProfilesApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetUserVoiceProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserVoiceProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVoiceProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *DeleteVoiceProfileApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r DeleteVoiceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVoiceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoiceProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GetVoiceProfileApiResponseBody
	ApplicationproblemJSONDefault *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetVoiceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoiceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BuildAvatarAsyncWithBodyWithResponse request with arbitrary body returning *BuildAvatarAsyncResponse
func (c *ClientWithResponses) BuildAvatarAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BuildAvatarAsyncResponse, error) {
	rsp, err := c.BuildAvatarAsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildAvatarAsyncResponse(rsp)
}

func (c *ClientWithResponses) BuildAvatarAsyncWithResponse(ctx context.Context, body BuildAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*BuildAvatarAsyncResponse, error) {
	rsp, err := c.BuildAvatarAsync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildAvatarAsyncResponse(rsp)
}

// GenerateAvatarAsyncWithBodyWithResponse request with arbitrary body returning *GenerateAvatarAsyncResponse
func (c *ClientWithResponses) GenerateAvatarAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvatarAsyncResponse, error) {
	rsp, err := c.GenerateAvatarAsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvatarAsyncResponse(rsp)
}

func (c *ClientWithResponses) GenerateAvatarAsyncWithResponse(ctx context.Context, body GenerateAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvatarAsyncResponse, error) {
	rsp, err := c.GenerateAvatarAsync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvatarAsyncResponse(rsp)
}

// GetAvatarGenerationStatusWithResponse request returning *GetAvatarGenerationStatusResponse
func (c *ClientWithResponses) GetAvatarGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetAvatarGenerationStatusResponse, error) {
	rsp, err := c.GetAvatarGenerationStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvatarGenerationStatusResponse(rsp)
}

// GetUserAvatarListWithResponse request returning *GetUserAvatarListResponse
func (c *ClientWithResponses) GetUserAvatarListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAvatarListResponse, error) {
	rsp, err := c.GetUserAvatarList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAvatarListResponse(rsp)
}

// DeleteAvatarWithResponse request returning *DeleteAvatarResponse
func (c *ClientWithResponses) DeleteAvatarWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAvatarResponse, error) {
	rsp, err := c.DeleteAvatar(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAvatarResponse(rsp)
}

// GetAvatarByIdWithResponse request returning *GetAvatarByIdResponse
func (c *ClientWithResponses) GetAvatarByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAvatarByIdResponse, error) {
	rsp, err := c.GetAvatarById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvatarByIdResponse(rsp)
}

// GenerateImageAsyncWithBodyWithResponse request with arbitrary body returning *GenerateImageAsyncResponse
func (c *ClientWithResponses) GenerateImageAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateImageAsyncResponse, error) {
	rsp, err := c.GenerateImageAsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateImageAsyncResponse(rsp)
}

func (c *ClientWithResponses) GenerateImageAsyncWithResponse(ctx context.Context, body GenerateImageAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateImageAsyncResponse, error) {
	rsp, err := c.GenerateImageAsync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateImageAsyncResponse(rsp)
}

// GetImageGenerationStatusWithResponse request returning *GetImageGenerationStatusResponse
func (c *ClientWithResponses) GetImageGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetImageGenerationStatusResponse, error) {
	rsp, err := c.GetImageGenerationStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetImageGenerationStatusResponse(rsp)
}

// ListInteractiveSessionsWithResponse request returning *ListInteractiveSessionsResponse
func (c *ClientWithResponses) ListInteractiveSessionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInteractiveSessionsResponse, error) {
	rsp, err := c.ListInteractiveSessions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInteractiveSessionsResponse(rsp)
}

// GetSessionProfileWithResponse request returning *GetSessionProfileResponse
func (c *ClientWithResponses) GetSessionProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSessionProfileResponse, error) {
	rsp, err := c.GetSessionProfile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionProfileResponse(rsp)
}

// StartInteractiveSessionWithBodyWithResponse request with arbitrary body returning *StartInteractiveSessionResponse
func (c *ClientWithResponses) StartInteractiveSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartInteractiveSessionResponse, error) {
	rsp, err := c.StartInteractiveSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartInteractiveSessionResponse(rsp)
}

func (c *ClientWithResponses) StartInteractiveSessionWithResponse(ctx context.Context, body StartInteractiveSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*StartInteractiveSessionResponse, error) {
	rsp, err := c.StartInteractiveSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartInteractiveSessionResponse(rsp)
}

// StopInteractiveSessionsWithBodyWithResponse request with arbitrary body returning *StopInteractiveSessionsResponse
func (c *ClientWithResponses) StopInteractiveSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StopInteractiveSessionsResponse, error) {
	rsp, err := c.StopInteractiveSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopInteractiveSessionsResponse(rsp)
}

func (c *ClientWithResponses) StopInteractiveSessionsWithResponse(ctx context.Context, body StopInteractiveSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*StopInteractiveSessionsResponse, error) {
	rsp, err := c.StopInteractiveSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopInteractiveSessionsResponse(rsp)
}

// ConvertSpeechToTextWithBodyWithResponse request with arbitrary body returning *ConvertSpeechToTextResponse
func (c *ClientWithResponses) ConvertSpeechToTextWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertSpeechToTextResponse, error) {
	rsp, err := c.ConvertSpeechToTextWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertSpeechToTextResponse(rsp)
}

func (c *ClientWithResponses) ConvertSpeechToTextWithResponse(ctx context.Context, body ConvertSpeechToTextJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertSpeechToTextResponse, error) {
	rsp, err := c.ConvertSpeechToText(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertSpeechToTextResponse(rsp)
}

// ConvertTextToSpeechWithBodyWithResponse request with arbitrary body returning *ConvertTextToSpeechResponse
func (c *ClientWithResponses) ConvertTextToSpeechWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConvertTextToSpeechResponse, error) {
	rsp, err := c.ConvertTextToSpeechWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertTextToSpeechResponse(rsp)
}

func (c *ClientWithResponses) ConvertTextToSpeechWithResponse(ctx context.Context, body ConvertTextToSpeechJSONRequestBody, reqEditors ...RequestEditorFn) (*ConvertTextToSpeechResponse, error) {
	rsp, err := c.ConvertTextToSpeech(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConvertTextToSpeechResponse(rsp)
}

// GenerateAvatarMotionAsyncWithBodyWithResponse request with arbitrary body returning *GenerateAvatarMotionAsyncResponse
func (c *ClientWithResponses) GenerateAvatarMotionAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvatarMotionAsyncResponse, error) {
	rsp, err := c.GenerateAvatarMotionAsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvatarMotionAsyncResponse(rsp)
}

func (c *ClientWithResponses) GenerateAvatarMotionAsyncWithResponse(ctx context.Context, body GenerateAvatarMotionAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvatarMotionAsyncResponse, error) {
	rsp, err := c.GenerateAvatarMotionAsync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvatarMotionAsyncResponse(rsp)
}

// GetAvatarMotionGenerationStatusWithResponse request returning *GetAvatarMotionGenerationStatusResponse
func (c *ClientWithResponses) GetAvatarMotionGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetAvatarMotionGenerationStatusResponse, error) {
	rsp, err := c.GetAvatarMotionGenerationStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvatarMotionGenerationStatusResponse(rsp)
}

// GenerateTalkingAvatarAsyncWithBodyWithResponse request with arbitrary body returning *GenerateTalkingAvatarAsyncResponse
func (c *ClientWithResponses) GenerateTalkingAvatarAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateTalkingAvatarAsyncResponse, error) {
	rsp, err := c.GenerateTalkingAvatarAsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTalkingAvatarAsyncResponse(rsp)
}

func (c *ClientWithResponses) GenerateTalkingAvatarAsyncWithResponse(ctx context.Context, body GenerateTalkingAvatarAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateTalkingAvatarAsyncResponse, error) {
	rsp, err := c.GenerateTalkingAvatarAsync(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTalkingAvatarAsyncResponse(rsp)
}

// GetTalkingAvatarGenerationStatusWithResponse request returning *GetTalkingAvatarGenerationStatusResponse
func (c *ClientWithResponses) GetTalkingAvatarGenerationStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetTalkingAvatarGenerationStatusResponse, error) {
	rsp, err := c.GetTalkingAvatarGenerationStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTalkingAvatarGenerationStatusResponse(rsp)
}

// CloneVoiceAsyncWithBodyWithResponse request with arbitrary body returning *CloneVoiceAsyncResponse
func (c *ClientWithResponses) CloneVoiceAsyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneVoiceAsyncResponse, error) {
	rsp, err := c.CloneVoiceAsyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneVoiceAsyncResponse(rsp)
}

// GetVoiceCloningStatusWithResponse request returning *GetVoiceCloningStatusResponse
func (c *ClientWithResponses) GetVoiceCloningStatusWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*GetVoiceCloningStatusResponse, error) {
	rsp, err := c.GetVoiceCloningStatus(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoiceCloningStatusResponse(rsp)
}

// GetPremadeVoiceProfilesWithResponse request returning *GetPremadeVoiceProfilesResponse
func (c *ClientWithResponses) GetPremadeVoiceProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPremadeVoiceProfilesResponse, error) {
	rsp, err := c.GetPremadeVoiceProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPremadeVoiceProfilesResponse(rsp)
}

// GetUserVoiceProfilesWithResponse request returning *GetUserVoiceProfilesResponse
func (c *ClientWithResponses) GetUserVoiceProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserVoiceProfilesResponse, error) {
	rsp, err := c.GetUserVoiceProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserVoiceProfilesResponse(rsp)
}

// DeleteVoiceProfileWithResponse request returning *DeleteVoiceProfileResponse
func (c *ClientWithResponses) DeleteVoiceProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteVoiceProfileResponse, error) {
	rsp, err := c.DeleteVoiceProfile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVoiceProfileResponse(rsp)
}

// GetVoiceProfileWithResponse request returning *GetVoiceProfileResponse
func (c *ClientWithResponses) GetVoiceProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetVoiceProfileResponse, error) {
	rsp, err := c.GetVoiceProfile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVoiceProfileResponse(rsp)
}

// ParseBuildAvatarAsyncResponse parses an HTTP response from a BuildAvatarAsyncWithResponse call
func ParseBuildAvatarAsyncResponse(rsp *http.Response) (*BuildAvatarAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildAvatarAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncBuildApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateAvatarAsyncResponse parses an HTTP response from a GenerateAvatarAsyncWithResponse call
func ParseGenerateAvatarAsyncResponse(rsp *http.Response) (*GenerateAvatarAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateAvatarAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateAvatarApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAvatarGenerationStatusResponse parses an HTTP response from a GetAvatarGenerationStatusWithResponse call
func ParseGetAvatarGenerationStatusResponse(rsp *http.Response) (*GetAvatarGenerationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvatarGenerationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateAvatarStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserAvatarListResponse parses an HTTP response from a GetUserAvatarListWithResponse call
func ParseGetUserAvatarListResponse(rsp *http.Response) (*GetUserAvatarListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAvatarListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUserAvatarListApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAvatarResponse parses an HTTP response from a DeleteAvatarWithResponse call
func ParseDeleteAvatarResponse(rsp *http.Response) (*DeleteAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAvatarByIdResponse parses an HTTP response from a GetAvatarByIdWithResponse call
func ParseGetAvatarByIdResponse(rsp *http.Response) (*GetAvatarByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvatarByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAvatarApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateImageAsyncResponse parses an HTTP response from a GenerateImageAsyncWithResponse call
func ParseGenerateImageAsyncResponse(rsp *http.Response) (*GenerateImageAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateImageAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateImageApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetImageGenerationStatusResponse parses an HTTP response from a GetImageGenerationStatusWithResponse call
func ParseGetImageGenerationStatusResponse(rsp *http.Response) (*GetImageGenerationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetImageGenerationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateImageStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListInteractiveSessionsResponse parses an HTTP response from a ListInteractiveSessionsWithResponse call
func ParseListInteractiveSessionsResponse(rsp *http.Response) (*ListInteractiveSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInteractiveSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSessionsApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSessionProfileResponse parses an HTTP response from a GetSessionProfileWithResponse call
func ParseGetSessionProfileResponse(rsp *http.Response) (*GetSessionProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSessionProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSessionProfileApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseStartInteractiveSessionResponse parses an HTTP response from a StartInteractiveSessionWithResponse call
func ParseStartInteractiveSessionResponse(rsp *http.Response) (*StartInteractiveSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartInteractiveSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StartSessionApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseStopInteractiveSessionsResponse parses an HTTP response from a StopInteractiveSessionsWithResponse call
func ParseStopInteractiveSessionsResponse(rsp *http.Response) (*StopInteractiveSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopInteractiveSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StopSessionsApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseConvertSpeechToTextResponse parses an HTTP response from a ConvertSpeechToTextWithResponse call
func ParseConvertSpeechToTextResponse(rsp *http.Response) (*ConvertSpeechToTextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertSpeechToTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest STTApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseConvertTextToSpeechResponse parses an HTTP response from a ConvertTextToSpeechWithResponse call
func ParseConvertTextToSpeechResponse(rsp *http.Response) (*ConvertTextToSpeechResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConvertTextToSpeechResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TTSApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateAvatarMotionAsyncResponse parses an HTTP response from a GenerateAvatarMotionAsyncWithResponse call
func ParseGenerateAvatarMotionAsyncResponse(rsp *http.Response) (*GenerateAvatarMotionAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateAvatarMotionAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateAvatarMotionApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAvatarMotionGenerationStatusResponse parses an HTTP response from a GetAvatarMotionGenerationStatusWithResponse call
func ParseGetAvatarMotionGenerationStatusResponse(rsp *http.Response) (*GetAvatarMotionGenerationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvatarMotionGenerationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateAvatarMotionStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateTalkingAvatarAsyncResponse parses an HTTP response from a GenerateTalkingAvatarAsyncWithResponse call
func ParseGenerateTalkingAvatarAsyncResponse(rsp *http.Response) (*GenerateTalkingAvatarAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateTalkingAvatarAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncGenerateTalkingAvatarApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetTalkingAvatarGenerationStatusResponse parses an HTTP response from a GetTalkingAvatarGenerationStatusWithResponse call
func ParseGetTalkingAvatarGenerationStatusResponse(rsp *http.Response) (*GetTalkingAvatarGenerationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTalkingAvatarGenerationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenerateTalkingAvatarStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCloneVoiceAsyncResponse parses an HTTP response from a CloneVoiceAsyncWithResponse call
func ParseCloneVoiceAsyncResponse(rsp *http.Response) (*CloneVoiceAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloneVoiceAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AsyncFinetuningApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetVoiceCloningStatusResponse parses an HTTP response from a GetVoiceCloningStatusWithResponse call
func ParseGetVoiceCloningStatusResponse(rsp *http.Response) (*GetVoiceCloningStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoiceCloningStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FinetuningStatusApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetPremadeVoiceProfilesResponse parses an HTTP response from a GetPremadeVoiceProfilesWithResponse call
func ParseGetPremadeVoiceProfilesResponse(rsp *http.Response) (*GetPremadeVoiceProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPremadeVoiceProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPremadeProfilesApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserVoiceProfilesResponse parses an HTTP response from a GetUserVoiceProfilesWithResponse call
func ParseGetUserVoiceProfilesResponse(rsp *http.Response) (*GetUserVoiceProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserVoiceProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVoiceProfilesApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteVoiceProfileResponse parses an HTTP response from a DeleteVoiceProfileWithResponse call
func ParseDeleteVoiceProfileResponse(rsp *http.Response) (*DeleteVoiceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVoiceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteVoiceProfileApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetVoiceProfileResponse parses an HTTP response from a GetVoiceProfileWithResponse call
func ParseGetVoiceProfileResponse(rsp *http.Response) (*GetVoiceProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVoiceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetVoiceProfileApiResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
