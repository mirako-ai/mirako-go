name: Regenerate API Client

on:
  repository_dispatch:
    types: [openapi-update]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to create (e.g., v1.2.3)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  regenerate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download latest OpenAPI spec
        run: |
          curl -sSL https://mirako.co/openapi-3.0.yaml -o openapi.yaml
          echo "‚úÖ Downloaded latest OpenAPI spec"

      - name: Check for changes
        id: check_changes
        run: |
          git diff --quiet openapi.yaml || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Install oapi-codegen
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Generate client code
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          oapi-codegen -config oapi-codegen.yaml openapi.yaml
          echo "‚úÖ Generated client code"

      - name: Tidy dependencies
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          go mod tidy
          echo "‚úÖ Tidied Go modules"

      - name: Build and verify
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          go build ./...
          echo "‚úÖ Build successful"

      - name: Determine version
        if: steps.check_changes.outputs.changed == 'true'
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ] && [ -n "${{ github.event.client_payload.version }}" ]; then
            VERSION="${{ github.event.client_payload.version }}"
          else
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            VERSION=$(echo $LATEST_TAG | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Version: ${VERSION}"

      - name: Configure Git
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create branch and commit
        if: steps.check_changes.outputs.changed == 'true'
        id: create_branch
        run: |
          BRANCH_NAME="auto-regen-${{ steps.version.outputs.version }}"
          git checkout -b ${BRANCH_NAME}
          git add openapi.yaml api/ go.mod go.sum
          git commit -m "chore: regenerate client from latest OpenAPI spec
          
          Auto-generated from OpenAPI spec update.
          Version: ${{ steps.version.outputs.version }}"
          git push origin ${BRANCH_NAME}
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "‚úÖ Created branch ${BRANCH_NAME}"

      - name: Create Pull Request
        if: steps.check_changes.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "chore: regenerate client ${{ steps.version.outputs.version }}" \
            --body "## ü§ñ Auto-generated PR
          
          This PR updates the SDK client code to match the latest OpenAPI specification.
          
          ### Changes
          - Updated OpenAPI spec from https://mirako.co/openapi-3.0.yaml
          - Regenerated client code in \`api/\` directory
          - Updated Go module dependencies
          
          ### Version
          ${{ steps.version.outputs.version }}
          
          ### Verification
          - ‚úÖ Code generation successful
          - ‚úÖ Go build passed
          - ‚úÖ Dependencies tidied
          
          ---
          *This PR was automatically created by the \`regen.yml\` workflow.*" \
            --base main \
            --head ${{ steps.create_branch.outputs.branch }}
          echo "‚úÖ Created pull request"

      - name: Create and push tag
        if: steps.check_changes.outputs.changed == 'true' && github.event_name == 'repository_dispatch'
        run: |
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}
          echo "‚úÖ Created and pushed tag ${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changed == 'true' && github.event_name == 'repository_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --title "${{ steps.version.outputs.version }} - API Update" \
            --notes "## ü§ñ Auto-generated Release
          
          This release updates the SDK to match the latest Mirako API specification.
          
          ### Changes
          - Updated OpenAPI spec from https://mirako.co/openapi-3.0.yaml
          - Regenerated client code in \`api/\` directory
          - Updated Go module dependencies
          
          ### Installation
          \`\`\`bash
          go get github.com/mirako-ai/mirako-go@${{ steps.version.outputs.version }}
          \`\`\`
          
          ### Documentation
          - [API Reference](https://pkg.go.dev/github.com/mirako-ai/mirako-go@${{ steps.version.outputs.version }})
          - [Examples](https://github.com/mirako-ai/mirako-go/tree/main/examples)
          
          ---
          *This release was automatically created by the \`regen.yml\` workflow.*"
          echo "‚úÖ Created GitHub release ${{ steps.version.outputs.version }}"

      - name: No changes detected
        if: steps.check_changes.outputs.changed != 'true'
        run: |
          echo "‚ÑπÔ∏è No changes detected in OpenAPI spec. Skipping regeneration."
